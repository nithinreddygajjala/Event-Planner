import { OnInit } from '@angular/core';
import { ControlValueAccessor, NgModel } from '@angular/forms';
export interface TimepickerConfig {
    hourStep: number;
    minuteStep: number;
    showMeridian: boolean;
    meridians?: any[];
    readonlyInput: boolean;
    mousewheel: boolean;
    arrowkeys: boolean;
    showSpinners: boolean;
    min?: number;
    max?: number;
}
export declare const timepickerConfig: TimepickerConfig;
export declare class TimepickerComponent implements ControlValueAccessor, OnInit {
    cd: NgModel;
    hourStep: number;
    minuteStep: number;
    readonlyInput: boolean;
    mousewheel: boolean;
    arrowkeys: boolean;
    showSpinners: boolean;
    min: Date;
    max: Date;
    meridians: Array<string>;
    showMeridian: boolean;
    onChange: any;
    onTouched: any;
    hours: string;
    minutes: string;
    invalidHours: any;
    invalidMinutes: any;
    meridian: any;
    protected _selected: Date;
    protected _showMeridian: boolean;
    protected selected: Date;
    constructor(cd: NgModel);
    ngOnInit(): void;
    writeValue(v: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    updateHours(): void;
    hoursOnBlur(event: Event): void;
    updateMinutes(): void;
    minutesOnBlur(event: Event): void;
    incrementHours(): void;
    decrementHours(): void;
    incrementMinutes(): void;
    decrementMinutes(): void;
    noIncrementHours(): boolean;
    noDecrementHours(): boolean;
    noIncrementMinutes(): boolean;
    noDecrementMinutes(): boolean;
    toggleMeridian(): void;
    noToggleMeridian(): boolean;
    protected refresh(): void;
    protected updateTemplate(): void;
    protected getHoursFromTemplate(): number;
    protected getMinutesFromTemplate(): number;
    protected pad(value: string | number): string;
    protected addMinutesToSelected(minutes: any): void;
}
